import SwiftUI

struct ARMainView: View {
    @State private var selectedCategory: ModelCategory? = nil
    @State private var selectedModelName: String? = nil
    @State private var showModelList: Bool = false
    @State private var buttonStates: [ModelCategory: Bool] = [.solarSystem: false, .stars: false, .spacecraft: false]
    
    var body: some View {
        ZStack {
            // AR View Background
            ARViewContainer(modelName: selectedModelName)
                .edgesIgnoringSafeArea(.all)
            
            // Starfield Overlay
            StarfieldView()
                .edgesIgnoringSafeArea(.all)
                .opacity(0.3)
            
            // Main UI
            VStack {
                Spacer()
                
                // Category Selector - Now a futuristic circular menu
                HStack(spacing: 30) {
                    ForEach(ModelCategory.allCases, id: \.self) { category in
                        CategoryButton(
                            title: category.title,
                            isActive: buttonStates[category] ?? false,
                            action: {
                                withAnimation(.spring(response: 0.3, dampingFraction: 0.6)) {
                                    selectedCategory = category
                                    showModelList = true
                                    // Reset all button states
                                    ModelCategory.allCases.forEach { buttonStates[$0] = false }
                                    // Set current button state
                                    buttonStates[category] = true
                                }
                            },
                            category: category
                        )
                    }
                }
                .padding(.vertical, 20)
                .padding(.horizontal, 30)
                .background(
                    Capsule()
                        .fill(.ultraThinMaterial)
                        .overlay(
                            Capsule()
                                .stroke(LinearGradient(
                                    gradient: Gradient(colors: [.blue.opacity(0.5), .purple.opacity(0.5)]),
                                    startPoint: .leading,
                                    endPoint: .trailing
                                ), lineWidth: 1
                        )
                        .shadow(color: .blue.opacity(0.3), radius: 10, x: 0, y: 5)
                )
                .padding(.bottom, 30)
            }
            
            // Model Picker - Now a holographic display
            if showModelList, let category = selectedCategory {
                HolographicModelPicker(
                    category: category,
                    onClose: { 
                        withAnimation(.spring()) {
                            showModelList = false
                            buttonStates[category] = false
                        }
                    },
                    onSelect: { model in
                        withAnimation {
                            selectedModelName = model.fileName
                            showModelList = false
                            buttonStates[category] = false
                        }
                    }
                )
                .transition(.asymmetric(
                    insertion: .opacity.combined(with: .scale(scale: 0.8)),
                    removal: .opacity.combined(with: .scale(scale: 0.9))
                )
                .zIndex(1)
            }
            
            // Selected Model Indicator
            if let modelName = selectedModelName,
               let model = allModels.first(where: { $0.fileName == modelName }) {
                SelectedModelCard(model: model)
                    .transition(.move(edge: .bottom))
            }
        }
    }
    
    private var allModels: [ModelItem] {
        ModelCategory.allCases.flatMap { models(for: $0) }
    }
}

// MARK: - Custom Views

struct CategoryButton: View {
    let title: String
    var isActive: Bool
    let action: () -> Void
    let category: ModelCategory
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 8) {
                Image(systemName: iconName(for: category))
                    .font(.system(size: 24))
                    .symbolEffect(.bounce, value: isActive)
                    .foregroundColor(isActive ? .white : .blue)
                
                Text(title)
                    .font(.system(size: 14, weight: .semibold))
            }
            .frame(width: 80, height: 80)
            .background(
                Group {
                    if isActive {
                        Circle()
                            .fill(LinearGradient(
                                gradient: Gradient(colors: [.blue.opacity(0.8), .purple.opacity(0.6)]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            ))
                            .overlay(
                                Circle()
                                    .stroke(LinearGradient(
                                        gradient: Gradient(colors: [.white.opacity(0.8), .blue.opacity(0.5)]),
                                        startPoint: .top,
                                        endPoint: .bottom
                                    ), lineWidth: 2)
                            )
                            .shadow(color: .blue.opacity(0.7), radius: 15, x: 0, y: 0)
                    } else {
                        Circle()
                            .fill(.ultraThinMaterial)
                            .overlay(
                                Circle()
                                    .stroke(LinearGradient(
                                        gradient: Gradient(colors: [.blue.opacity(0.3), .purple.opacity(0.3)]),
                                        startPoint: .top,
                                        endPoint: .bottom
                                    ), lineWidth: 1)
                            )
                    }
                }
            )
        }
        .buttonStyle(SpaceButtonStyle())
    }
    
    private func iconName(for category: ModelCategory) -> String {
        switch category {
        case .solarSystem: return "globe.americas.fill"
        case .stars: return "star.fill"
        case .spacecraft: return "airplane"
        }
    }
}

struct HolographicModelPicker: View {
    let category: ModelCategory
    let onClose: () -> Void
    let onSelect: (ModelItem) -> Void
    
    var body: some View {
        VStack {
            // Header
            HStack {
                Text(category.title)
                    .font(.title2)
                    .bold()
                    .foregroundColor(.white)
                
                Spacer()
                
                Button(action: onClose) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.title2)
                        .foregroundColor(.white.opacity(0.7))
                }
            }
            .padding()
            .background(
                LinearGradient(
                    gradient: Gradient(colors: [.blue.opacity(0.2), .purple.opacity(0.1)]),
                    startPoint: .top,
                    endPoint: .bottom
                )
            )
            
            // Model Grid
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 20) {
                    ForEach(models(for: category)) { model in
                        ModelCard(model: model, action: { onSelect(model) })
                    }
                }
                .padding(.horizontal)
            }
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical)
        .background(
            RoundedRectangle(cornerRadius: 25)
                .fill(.ultraThinMaterial)
                .overlay(
                    RoundedRectangle(cornerRadius: 25)
                        .stroke(LinearGradient(
                            gradient: Gradient(colors: [.blue.opacity(0.5), .purple.opacity(0.3)]),
                            startPoint: .leading,
                            endPoint: .trailing
                        ), lineWidth: 1)
                )
                .shadow(color: .blue.opacity(0.3), radius: 20, x: 0, y: 10)
        )
        .padding(.horizontal, 20)
        .padding(.bottom, 30)
    }
}

struct ModelCard: View {
    let model: ModelItem
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 8) {
                Text(model.emoji)
                    .font(.system(size: 40))
                    .padding(15)
                    .background(
                        Circle()
                            .fill(LinearGradient(
                                gradient: Gradient(colors: [.blue.opacity(0.3), .purple.opacity(0.2)]),
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            ))
                    )
                
                Text(model.name)
                    .font(.system(size: 14, weight: .medium))
                    .foregroundColor(.white)
            }
            .frame(width: 100, height: 140)
            .background(
                RoundedRectangle(cornerRadius: 20)
                    .fill(.ultraThinMaterial)
                    .overlay(
                        RoundedRectangle(cornerRadius: 20)
                            .stroke(LinearGradient(
                                gradient: Gradient(colors: [.blue.opacity(0.3), .purple.opacity(0.1)]),
                                startPoint: .top,
                                endPoint: .bottom
                            ), lineWidth: 1)
                    )
            )
        }
        .buttonStyle(SpaceButtonStyle())
    }
}

struct SelectedModelCard: View {
    let model: ModelItem
    
    var body: some View {
        HStack {
            Text(model.emoji)
                .font(.title)
            
            VStack(alignment: .leading) {
                Text(model.name)
                    .font(.headline)
                Text("Selected")
                    .font(.caption)
                    .opacity(0.7)
            }
            .foregroundColor(.white)
            
            Spacer()
        }
        .padding()
        .frame(maxWidth: 200)
        .background(
            Capsule()
                .fill(.ultraThinMaterial)
                .overlay(
                    Capsule()
                        .stroke(LinearGradient(
                            gradient: Gradient(colors: [.blue.opacity(0.5), .purple.opacity(0.3)]),
                            startPoint: .leading,
                            endPoint: .trailing
                        ), lineWidth: 1)
                )
                .shadow(color: .blue.opacity(0.3), radius: 10, x: 0, y: 5)
        )
        .padding(.bottom, 30)
        .transition(.move(edge: .bottom))
    }
}

struct StarfieldView: View {
    @State private var stars: [Star] = []
    
    var body: some View {
        Canvas { context, size in
            for star in stars {
                let rect = CGRect(x: star.x, y: star.y, width: star.size, height: star.size)
                context.fill(
                    Path(ellipseIn: rect),
                    with: .color(star.color.opacity(star.opacity))
            }
        }
        .onAppear {
            // Create random stars
            stars = (0..<200).map { _ in
                Star(
                    x: CGFloat.random(in: 0..<UIScreen.main.bounds.width),
                    y: CGFloat.random(in: 0..<UIScreen.main.bounds.height),
                    size: CGFloat.random(in: 1..<3),
                    opacity: Double.random(in: 0.1..<1.0),
                    color: [Color.white, Color.blue, Color.purple].randomElement()!
                )
            }
        }
    }
}

struct Star {
    let x: CGFloat
    let y: CGFloat
    let size: CGFloat
    let opacity: Double
    let color: Color
}

struct SpaceButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .scaleEffect(configuration.isPressed ? 0.9 : 1.0)
            .animation(.spring(response: 0.3, dampingFraction: 0.6), value: configuration.isPressed)
    }
}

#Preview {
    ARMainView()
        .preferredColorScheme(.dark)
}
